Q.1 Write a Java Program to implement Abstract Factory Pattern for Shape interface.

Ans ->

// Abstract Product - Shape interface
interface Shape {
    void draw();
}

// Concrete Products
class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Circle");
    }
}

class Square implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Square");
    }
}

class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Rectangle");
    }
}

// Abstract Factory - AbstractShapeFactory interface
interface AbstractShapeFactory {
    Shape createShape();
}

// Concrete Factories
class CircleFactory implements AbstractShapeFactory {
    @Override
    public Shape createShape() {
        return new Circle();
    }
}

class SquareFactory implements AbstractShapeFactory {
    @Override
    public Shape createShape() {
        return new Square();
    }
}

class RectangleFactory implements AbstractShapeFactory {
    @Override
    public Shape createShape() {
        return new Rectangle();
    }
}

// Client code
public class AbstractFactoryPatternExample {
    public static void main(String[] args) {
        // Creating factories
        AbstractShapeFactory circleFactory = new CircleFactory();
        AbstractShapeFactory squareFactory = new SquareFactory();
        AbstractShapeFactory rectangleFactory = new RectangleFactory();

        // Creating shapes using factories
        Shape circle = circleFactory.createShape();
        Shape square = squareFactory.createShape();
        Shape rectangle = rectangleFactory.createShape();

        // Drawing shapes
        circle.draw();
        square.draw();
        rectangle.draw();
    }
}
